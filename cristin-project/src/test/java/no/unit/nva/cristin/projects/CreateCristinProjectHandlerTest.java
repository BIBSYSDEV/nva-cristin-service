package no.unit.nva.cristin.projects;

import com.amazonaws.services.lambda.runtime.Context;
import com.fasterxml.jackson.core.JsonProcessingException;
import no.unit.nva.cristin.projects.model.nva.NvaProject;
import no.unit.nva.testutils.HandlerRequestBuilder;
import nva.commons.apigateway.GatewayResponse;
import nva.commons.core.Environment;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;

import static no.unit.nva.cristin.model.Constants.OBJECT_MAPPER;
import static no.unit.nva.cristin.projects.CreateCristinProjectHandler.NEEDED_ROLE;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;

class CreateCristinProjectHandlerTest {
    public static final String NO_ACCESS = "NoAccess";
    private final Environment environment = new Environment();
    private Context context;
    private ByteArrayOutputStream output;
    private CreateCristinProjectHandler handler;

    @BeforeEach
    void setUp() {
        context = mock(Context.class);
        output = new ByteArrayOutputStream();
        handler = new CreateCristinProjectHandler(environment);
    }


    @Test
    void shouldReturn403ForbiddenWhenRequestIsMissingRole() throws Exception {

        NvaProject project = RandomProjectDataGenerator.randomNvaProject();

        InputStream input =  new HandlerRequestBuilder<NvaProject>(OBJECT_MAPPER)
                .withBody(project)
                .withRoles(NO_ACCESS)
                .build();

        handler.handleRequest(input, output, context);
        GatewayResponse<Object> response = GatewayResponse.fromOutputStream(output);

        assertThat(response.getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }

    @Test
    void shouldReturn400BadRequestWhenInvalidInput() throws Exception {
        NvaProject empty = new NvaProject();
        GatewayResponse<NvaProject> response = postRequest(empty);
        assertThat(response.getStatusCode(), equalTo(HttpURLConnection.HTTP_BAD_REQUEST));
    }

    @Test
    void shouldReturnDummyPersonWhenRequestHasDummyNationalIdentityNumber() throws Exception {

        NvaProject expected = RandomProjectDataGenerator.randomNvaProject();
        NvaProject actual = postRequest(expected).getBodyObject(NvaProject.class);

        assertNotNull(actual.getId());
        actual.setId(expected.getId());   // Id is supposed to generated by Cristin?
        assertThat(actual, equalTo(expected));
    }

    private GatewayResponse<NvaProject> postRequest(NvaProject body) throws IOException {
        InputStream input = requestWithBodyAndRole(body);
        handler.handleRequest(input, output, context);
        return GatewayResponse.fromOutputStream(output);
    }

    private InputStream requestWithBodyAndRole(NvaProject body) throws JsonProcessingException {
        return new HandlerRequestBuilder<NvaProject>(OBJECT_MAPPER)
                .withBody(body)
                .withRoles(NEEDED_ROLE)
                .build();
    }


}
