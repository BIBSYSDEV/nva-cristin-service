plugins {
    id 'java-library'
    id 'pmd'
    id 'checkstyle'
    id 'jacoco-report-aggregation'
    id 'com.diffplug.spotless'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation libs.bundles.nvaCommons
    implementation libs.bundles.jackson
    implementation libs.slf4j.api
    testImplementation libs.bundles.testing
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java' , '*/*.xml'
        }
    }
    check {
        resources {
            exclude '**/*.java' , '*/*.xml'
        }
    }
}

tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    violationRules {
        rule {
            excludes = [
                    'cristin-commons:*'
            ]
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.800
            }
        }
        rule {
            excludes = [
                    'cristin-commons:*'
            ]
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
    dependsOn jacocoTestReport
}

tasks.named('test', Test) {
    useJUnitPlatform()
    testLogging {
        events 'skipped', 'passed', 'failed'
    }
    environment "ALLOWED_ORIGIN", "*"
    environment "CRISTIN_API_URL", "https://api.cristin-test.uio.no/v2"
    environment "BASE_PATH", "cristin"
    environment "DOMAIN_NAME", "api.dev.nva.aws.unit.no"
    environment "COGNITO_URI", "https://example.cognito.org"
    environment "CRISTIN_BOT_FILTER_BYPASS_HEADER_NAME", "Hello"
    environment "CRISTIN_BOT_FILTER_BYPASS_HEADER_VALUE", "World"
    finalizedBy jacocoTestReport
}

tasks.register('createTestUsers', Test) {
    useJUnitPlatform {
        includeTags('createTestUsers')
    }

    outputs.upToDateWhen { false }
}

tasks.register('deleteTestUsers', Test) {
    useJUnitPlatform {
        includeTags('deleteTestUsers')
    }

    outputs.upToDateWhen { false }
}

tasks.register('karateTest', Test) {
    useJUnitPlatform {
        includeTags('karateTest')
    }

    environment "ALLOWED_ORIGIN", "*"
    environment "CRISTIN_API_URL", "https://api.cristin-test.uio.no/v2"
    environment "DOMAIN_NAME", "api.dev.nva.aws.unit.no"

    systemProperty "karate.options", System.properties.getProperty("karate.options")
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    outputs.upToDateWhen { false }
}

pmd {
    toolVersion = '7.5.0'
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()

    showViolations = true
}

tasks.withType(Checkstyle).configureEach{
    reports {
        xml.required
        html.required
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'utf-8'
}


spotless {
    java {
        toggleOffOn() // Ignores sections between `spotless:off` / `spotless:on`
        googleJavaFormat().reflowLongStrings().formatJavadoc(true).reorderImports(true)
    }

    format 'misc', {
        target '.gitignore', '.gitattributes', '.editorconfig', '**/*.gradle'
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }

    enforceCheck false // Disabled so that we can reformat in a separate PR
}

// Reformat project before build and test if needed
//tasks.named('build').configure {
//    dependsOn 'spotlessApply'
//}
//
//tasks.named('test').configure {
//    dependsOn 'spotlessApply'
//}
