plugins {
    id 'java'
    id 'jacoco-report-aggregation'
}

group 'no.unit.nva'
version '1.0-JDK17'

dependencies {
    testImplementation libs.bundles.testing
    implementation libs.bundles.nvaCommons
    implementation libs.bundles.jackson
    implementation libs.slf4j.api
}

sourceCompatibility = JavaVersion.VERSION_17  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_17 // bytecode target version

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

tasks.register('karateTest', Test) {
    useJUnitPlatform {
        includeTags('karateTest')
    }

    environment "ALLOWED_ORIGIN", "*"
    environment "CRISTIN_API_URL", "https://api.cristin-test.uio.no/v2"
    environment "DOMAIN_NAME", "api.dev.nva.aws.unit.no"

    systemProperty "karate.options", System.properties.getProperty("karate.options")
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    outputs.upToDateWhen { false }
}

tasks.register('createTestUsers', Test) {
    useJUnitPlatform {
        includeTags('createTestUsers')
    }

    outputs.upToDateWhen { false }
}

tasks.register('deleteTestUsers', Test) {
    useJUnitPlatform {
        includeTags('deleteTestUsers')
    }

    outputs.upToDateWhen { false }
}

tasks.register('pmd', Checkstyle) {
    toolVersion = '6.20.0'
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

tasks.register('checkstyle',Checkstyle) {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.named('test') {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'skipped', 'passed', 'failed'
    }
    environment "ALLOWED_ORIGIN", "*"
    environment "CRISTIN_API_URL", "https://api.cristin-test.uio.no/v2"
    environment "BASE_PATH", "cristin"
    environment "DOMAIN_NAME", "api.dev.nva.aws.unit.no"
//    finalizedBy jacocoTestReport
}

tasks.named('jacocoTestCoverageVerification') {
    violationRules {
        rule {
            excludes = [
                    'cristin-commons:*'
            ]
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            excludes = [
                    'cristin-commons:*'
            ]
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
    dependsOn(jacocoTestReport)
}
check.dependsOn jacocoTestCoverageVerification

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.enabled true
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'utf-8'
//    options.compilerArgs << '--release:17'
}


