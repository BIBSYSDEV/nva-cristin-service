plugins {
    id 'java-library'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco-report-aggregation'
}

group 'no.unit.nva'
version '1.0-JDK17'
sourceCompatibility = JavaVersion.VERSION_17  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_17 // bytecode target version

dependencies {
    testImplementation libs.bundles.testing
    implementation libs.bundles.nvaCommons
    implementation libs.bundles.jackson
    implementation libs.slf4j.api
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

tasks.named('test', Test) {
    println("Java-convension - ${project.name} - test")
    useJUnitPlatform()
    testLogging {
        events 'skipped', 'passed', 'failed'
    }
    environment "ALLOWED_ORIGIN", "*"
    environment "CRISTIN_API_URL", "https://api.cristin-test.uio.no/v2"
    environment "BASE_PATH", "cristin"
    environment "DOMAIN_NAME", "api.dev.nva.aws.unit.no"
//    finalizedBy jacocoTestReport
}

tasks.register ('pmd') {
    println("Java-convension - ${project.name} - pmd")
    toolVersion = '6.20.0'
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

tasks.register('checkstyle') {
    println("Java-convension - ${project.name} - checkstyle")
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}


tasks.withType(Checkstyle).configureEach{
    println("Java-convension - type-Checkstyle - ${project.name} - ${it.name}")
    reports {
        xml.required
        html.required
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

//check.dependsOn jacocoTestCoverageVerification
//jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    println("Java-convension - ${project.name} jacocoTestCoverageVerification - 1")
    violationRules {
        rule {
            excludes = [
                    'cristin-commons:*'
            ]
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.800
            }
        }

        rule {
            excludes = [
                    'cristin-commons:*'
            ]
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
    dependsOn jacocoTestReport
}

//check {
//    println("Java-convension - ${project.name} - check")
//    dependsOn jacocoTestCoverageVerification
//    dependsOn testCodeCoverageReport
////    dependsOn integrationTestCodeCoverageReport
//}


tasks.register('karateTest', Test) {
    useJUnitPlatform {
        includeTags('karateTest')
    }

    environment "ALLOWED_ORIGIN", "*"
    environment "CRISTIN_API_URL", "https://api.cristin-test.uio.no/v2"
    environment "DOMAIN_NAME", "api.dev.nva.aws.unit.no"

    systemProperty "karate.options", System.properties.getProperty("karate.options")
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    outputs.upToDateWhen { false }
}

tasks.register('createTestUsers', Test) {
    useJUnitPlatform {
        includeTags('createTestUsers')
    }

    outputs.upToDateWhen { false }
}

tasks.register('deleteTestUsers', Test) {
    useJUnitPlatform {
        includeTags('deleteTestUsers')
    }

    outputs.upToDateWhen { false }
}




